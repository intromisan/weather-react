{"version":3,"sources":["utility/images/weather-icons/arrow.svg","utility/images/weather-icons/clear.svg","utility/images/weather-icons/clear-night.svg","utility/images/weather-icons/cloudy.svg","utility/images/weather-icons/cloudy-night.svg","utility/images/weather-icons/cloudy-sunny.svg","utility/images/weather-icons/fog.svg","utility/images/weather-icons/heavy-rain.svg","utility/images/weather-icons/light-rain.svg","utility/images/weather-icons/mist.svg","utility/images/weather-icons/rain.svg","utility/images/weather-icons/rain-night.svg","utility/images/weather-icons/shower-rain.svg","utility/images/weather-icons/snow.svg","utility/images/weather-icons/snow-night.svg","utility/images/weather-icons/snow-rain.svg","utility/images/weather-icons/thunder.svg","utility/images/weather-icons/thunder-night.svg","utility/images/weather-icons/thunder-rain.svg","utility/images/weather-icons/thunder-rain-night.svg","components/Search.jsx","components/Weather/Image.jsx","components/Welcome.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","className","isNight","type","placeholder","onChange","event","setQuery","target","value","query","onKeyPress","search","Image","picture","mainWeather","rainNight","snowNight","desc","thunderNight","thunderRainNight","cloudyNight","clearNight","cloudySunny","cloudy","lightRain","heavyRain","showerRain","rain","snowRain","snow","thunder","thunderRain","fog","mist","clear","src","alt","Welcome","api","App","useState","weather","setWeather","timezoneInMinutes","timezone","currTime","moment","utcOffset","format","hour","hours","bgColor","style","color","backgroundColor","key","fetch","then","res","json","result","console","log","catch","err","main","description","Arrow","Math","round","temp_min","temp","fill","temp_max","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b92ed76f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.0de63046.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear.670b7fc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.66d1a53b.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.5111b76e.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-night.d985f427.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-sunny.5d260ffb.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.a2b43e28.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavy-rain.32a0b7a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/light-rain.6b2ac80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/mist.684ff8c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.06b4c02c.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain-night.3588ccbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/shower-rain.bd58a153.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.92a3847b.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow-night.a65faed4.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow-rain.6461a8b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.22050fae.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder-night.5bde561f.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder-rain.6eba0a2f.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder-rain-night.f5ad2705.svg\";","import React from 'react';\r\n\r\nexport const Search = props => {\r\n  return (\r\n    <div className={props.isNight ? 'search-box-night' : 'search-box' }>\r\n      <input\r\n        type='text'\r\n        placeholder='Search...'\r\n        onChange={(event) => props.setQuery(event.target.value)}\r\n        value={props.query}\r\n        onKeyPress={props.search}\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport clear from '../../utility/images/weather-icons/clear.svg';\r\nimport clearNight from '../../utility/images/weather-icons/clear-night.svg';\r\nimport cloudy from '../../utility/images/weather-icons/cloudy.svg';\r\nimport cloudyNight from '../../utility/images/weather-icons/cloudy-night.svg';\r\nimport cloudySunny from '../../utility/images/weather-icons/cloudy-sunny.svg';\r\nimport fog from '../../utility/images/weather-icons/fog.svg';\r\nimport heavyRain from '../../utility/images/weather-icons/heavy-rain.svg';\r\nimport lightRain from '../../utility/images/weather-icons/light-rain.svg';\r\nimport mist from '../../utility/images/weather-icons/mist.svg';\r\nimport rain from '../../utility/images/weather-icons/rain.svg';\r\nimport rainNight from '../../utility/images/weather-icons/rain-night.svg';\r\nimport showerRain from '../../utility/images/weather-icons/shower-rain.svg';\r\nimport snow from '../../utility/images/weather-icons/snow.svg';\r\nimport snowNight from '../../utility/images/weather-icons/snow-night.svg';\r\nimport snowRain from '../../utility/images/weather-icons/snow-rain.svg';\r\nimport thunder from '../../utility/images/weather-icons/thunder.svg';\r\nimport thunderNight from '../../utility/images/weather-icons/thunder-night.svg';\r\nimport thunderRain from '../../utility/images/weather-icons/thunder-rain.svg';\r\nimport thunderRainNight from '../../utility/images/weather-icons/thunder-rain-night.svg';\r\n\r\n\r\nexport const Image = props => {\r\n  let picture = ''\r\n\r\n  if (props.isNight) {\r\n    switch (props.mainWeather) {\r\n      case 'Rain':\r\n        picture = rainNight;\r\n        break;\r\n      case 'Snow':\r\n        picture = snowNight;\r\n        break;\r\n      case 'Thunderstorm':\r\n        switch (props.desc) {\r\n          case 'Thunderstorm':\r\n            picture = thunderNight\r\n            break;\r\n          default:\r\n            picture = thunderRainNight;\r\n            break;\r\n        }\r\n        break\r\n      case 'Clouds':\r\n        picture = cloudyNight;\r\n        break;\r\n      default:\r\n        picture = clearNight;\r\n        break;\r\n    }\r\n  } else {\r\n    switch (props.mainWeather) {\r\n      case 'Clouds':\r\n        switch (props.desc) {\r\n          case 'few clouds':\r\n            picture = cloudySunny\r\n            break;\r\n          default:\r\n            picture = cloudy\r\n            break;\r\n        }\r\n        break;\r\n      case 'Rain':\r\n        switch (props.desc) {\r\n          case 'light rain':\r\n            picture = lightRain\r\n            break;\r\n          case 'heavy intensity rain':\r\n            picture = heavyRain\r\n            break;\r\n          case 'shower rain':\r\n            picture = showerRain\r\n            break;\r\n          default:\r\n            picture = rain\r\n            break;\r\n        }\r\n        break;\r\n      case 'Snow':\r\n        switch (props.desc) {\r\n          case 'Rain and snow':\r\n            picture = snowRain\r\n            break;\r\n          default:\r\n            picture = snow\r\n            break;\r\n        }\r\n        break;\r\n      case 'Thunderstorm':\r\n        switch (props.desc) {\r\n          case 'Thunderstorm':\r\n            picture = thunder\r\n            break;\r\n          default:\r\n            picture = thunderRain\r\n            break;\r\n        }\r\n        break;\r\n      case 'Atmosphere':\r\n        switch (props.desc) {\r\n          case 'fog':\r\n            picture = fog\r\n            break;\r\n          default:\r\n            picture = mist\r\n            break;\r\n        }\r\n        break;\r\n      default:\r\n        picture = clear\r\n        break;\r\n    }    \r\n  }\r\n\r\n\r\n  return (\r\n    <div className='image-box'>\r\n      <img\r\n        src={picture}\r\n        alt='weather'\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Welcome = props => {\r\n  return (\r\n    <div className='Welcome'>\r\n      <h1>Welcome to <br />WeatherApp!</h1>\r\n      <h3>to start simply choose the city</h3>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\nimport moment from 'moment';\n\n\nimport './App.css';\nimport Arrow from './utility/images/weather-icons/arrow.svg';\nimport { Search } from './components/Search';\nimport { Image } from './components/Weather/Image';\nimport { Welcome } from './components/Welcome';\n\nconst api = {\n  key: 'ea4916ab4bbf15a404369e1564b83cd7',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n  // const [isNight, setIsNight] = useState(false)\n\n\n  const search = event => {\n    if (event.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('')\n          console.log(result)\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n\n  const dateBuilder = d => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`\n  }\n\n  const timezone = weather.timezone //needs to be converted in minutes \n  const timezoneInMinutes = timezone / 60;\n  const currTime = moment().utcOffset(timezoneInMinutes).format(\"HH:mm\");\n\n  const hour = moment().utcOffset(timezoneInMinutes).hours()\n  // const minutes = new Date().getMinutes()\n  let bgColor = ''\n  if (hour >= 5 && hour <= 11) {\n    // bgColor = '#d7cbb5'\n    bgColor = '#cfd7cb'\n  } else if (hour >= 17 && hour <= 22) {\n    // bgColor = '#cfd7cb'\n    bgColor = '#babdc0'\n  } else if (hour >= 23 || hour <= 4) {\n    bgColor = '#323232'\n    \n  } else {\n    bgColor = 'rgb(235,198,178)'\n  }\n\n  return (\n    <div className=\"App\">\n      <main \n        style={hour >= 23 || hour <= 4 ? {color: 'white', backgroundColor: bgColor} : {color: 'black', backgroundColor: bgColor}}\n        >\n        <Search\n          setQuery={setQuery}\n          query={query}\n          search={search}\n          isNight={hour >= 23 || hour <= 4}\n        />\n        {typeof weather.main != 'undefined' ?\n          <div>\n            <Image\n              mainWeather={weather.weather[0].main}\n              desc={weather.weather[0].description}\n              isNight={hour >= 23 || hour <= 4}\n            />\n            <div className='weather-info'>\n              <div className='temp'>\n                <span className='temp-min'>\n                  <img src={Arrow} alt='#' />\n                  {Math.round(weather.main.temp_min)}&deg;\n             </span>\n                <span className='temp-normal'>{Math.round(weather.main.temp)}&deg;</span>\n                <span className='temp-max'>\n                  <img style={{fill: 'white'}} src={Arrow} alt='#' />\n                  {Math.round(weather.main.temp_max)}&deg;\n             </span>\n              </div>\n            </div>\n            <div className='location-date-box'>\n              <div className='location'>{`${weather.name}, ${weather.sys.country}`}</div>\n              <div className='date'>{dateBuilder(new Date())}</div>\n            </div>\n            <div className='time-box'>\n              <div className='time'>{currTime}</div>\n            </div>\n          </div>\n          : <Welcome />}\n      </main>\n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}